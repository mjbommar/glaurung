name: Samples Docker Build

on:
  push:
    branches: [ main, master ]
    paths:
      - 'samples/**'
      - '.github/workflows/samples-docker.yml'
  pull_request:
    paths:
      - 'samples/**'
      - '.github/workflows/samples-docker.yml'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64,linux/riscv64,linux/386'
      targets:
        description: 'Build targets (space-separated)'
        required: false
        default: 'all'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/samples

jobs:
  build-samples:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - target: native
            description: "Native GCC/Clang builds"
          - target: cross
            description: "Cross-compilation builds"
          - target: fortran
            description: "Fortran builds"
          - target: java
            description: "Java builds"
          - target: python
            description: "Python builds"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.target }}" >> $GITHUB_OUTPUT
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.target }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./samples
          file: ./samples/Dockerfile
          target: ${{ matrix.target }}-build
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Samples ${{ matrix.target }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build samples with Docker
        run: |
          cd samples
          docker-compose --profile ${{ matrix.target }} up --build --remove-orphans

      - name: Generate metadata
        run: |
          python scripts/index_samples.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samples-${{ matrix.target }}
          path: samples/binaries/
          retention-days: 30

  build-multiplatform:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.inputs.targets, 'multiplatform')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64,linux/arm64,linux/riscv64,linux/386" >> $GITHUB_OUTPUT
          fi

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: ./samples
          file: ./samples/Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:multiplatform
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:multiplatform-${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Samples Multiplatform
            org.opencontainers.image.description=Multi-platform sample binaries
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build samples for multiple platforms
        run: |
          cd samples
          docker buildx build \
            --platform ${{ steps.platforms.outputs.platforms }} \
            --load \
            --tag samples-multiplatform \
            -f Dockerfile \
            .

          # Extract binaries from multi-platform build
          docker create --name temp-container samples-multiplatform
          docker cp temp-container:/binaries ./binaries-multiplatform
          docker rm temp-container

      - name: Generate metadata for multiplatform
        run: |
          BIN_DIR=binaries-multiplatform python scripts/index_samples.py

      - name: Upload multiplatform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samples-multiplatform
          path: samples/binaries-multiplatform/
          retention-days: 30

  test-samples:
    runs-on: ubuntu-latest
    needs: [build-samples]
    if: github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: samples/binaries/

      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y file binutils

      - name: Validate built binaries
        run: |
          cd samples

          # Check that we have binaries
          find binaries/ -type f -executable | head -10

          # Validate with file command
          find binaries/ -type f -exec file {} \; | head -20

          # Check metadata exists
          ls -la binaries/metadata/

          # Validate index.json
          if [ -f binaries/index.json ]; then
            jq '.files | length' binaries/index.json
            echo "Index contains $(jq '.files | length' binaries/index.json) files"
          fi

      - name: Test sample execution (native binaries)
        run: |
          cd samples

          # Test a simple native binary if it exists
          if [ -f binaries/native/gcc/hello-gcc-O2 ]; then
            ./binaries/native/gcc/hello-gcc-O2
          fi

          # Test Java if available
          if [ -f binaries/java/HelloWorld.jar ]; then
            java -jar binaries/java/HelloWorld.jar
          fi

  summary:
    runs-on: ubuntu-latest
    needs: [build-samples, test-samples]
    if: always()

    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-samples.result }}" = "success" ]; then
            echo "✅ Sample builds completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Sample builds failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-samples.result }}" = "success" ]; then
            echo "✅ Sample validation completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Sample validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Native GCC/Clang builds" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-compilation builds (ARM64, RISC-V, x86_32, Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- Fortran builds" >> $GITHUB_STEP_SUMMARY
          echo "- Java builds (class + JAR)" >> $GITHUB_STEP_SUMMARY
          echo "- Python bytecode builds" >> $GITHUB_STEP_SUMMARY
          echo "- Build metadata and index" >> $GITHUB_STEP_SUMMARY