# Linux ARM64 Dockerfile
FROM arm64v8/ubuntu:22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install native ARM64 build tools
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    clang \
    llvm \
    lld \
    python3 \
    python3-dev \
    python3-pip \
    openjdk-17-jdk \
    gfortran-11 \
    file \
    jq \
    curl \
    wget \
    git \
    make \
    cmake \
    ninja-build \
    pkg-config \
    # Cross-compilation toolchains for other architectures
    gcc-x86-64-linux-gnu \
    g++-x86-64-linux-gnu \
    gcc-arm-linux-gnueabihf \
    g++-arm-linux-gnueabihf \
    gcc-riscv64-linux-gnu \
    g++-riscv64-linux-gnu \
    # MinGW for Windows cross-compilation
    gcc-mingw-w64 \
    g++-mingw-w64 \
    binutils-x86-64-linux-gnu \
    binutils-arm-linux-gnueabihf \
    binutils-riscv64-linux-gnu \
    binutils-mingw-w64 \
    && rm -rf /var/lib/apt/lists/*

# Optionally install additional JDKs if available
RUN set -eux; apt-get update; \
    for pkg in openjdk-11-jdk openjdk-21-jdk; do \
      if apt-cache show "$pkg" >/dev/null 2>&1; then apt-get install -y --no-install-recommends "$pkg"; fi; \
    done; \
    rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV TARGET_OS=linux
ENV TARGET_ARCH=arm64
ENV CROSS_COMPILE_X86_64=x86_64-linux-gnu-
ENV CROSS_COMPILE_ARM=arm-linux-gnueabihf-
ENV CROSS_COMPILE_RISCV64=riscv64-linux-gnu-
ENV CROSS_COMPILE_MINGW=x86_64-w64-mingw32-

# Set up Python
RUN python3 -m pip install --upgrade pip setuptools wheel

# Create workspace
WORKDIR /workspace

# Copy source files
COPY source/ ./source/

# Copy build script
COPY docker/build-linux.sh /usr/local/bin/build-platform.sh
RUN chmod +x /usr/local/bin/build-platform.sh

# Build stage
FROM base AS build

# Create output directory
RUN mkdir -p /workspace/binaries

# Run builds
RUN /usr/local/bin/build-platform.sh

# Final stage
FROM scratch AS final
COPY --from=build /workspace/binaries/ /binaries/

# Export stage for multi-platform builds
FROM build AS export
RUN mkdir -p /export && cp -r /workspace/binaries/* /export/
