# macOS ARM64 cross-compilation Dockerfile (Linux host targeting macOS arm64)
# Note: Requires a macOS 11+ SDK to build arm64 targets with osxcross.

FROM ubuntu:22.04 AS base

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    clang \
    llvm \
    lld \
    python3 \
    python3-dev \
    python3-pip \
    openjdk-17-jdk \
    gfortran-11 \
    file \
    jq \
    curl \
    wget \
    git \
    make \
    cmake \
    ninja-build \
    pkg-config \
    libxml2-dev \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    patch \
    # Cross-compilation for other platforms (optional)
    gcc-aarch64-linux-gnu \
    g++-aarch64-linux-gnu \
    gcc-arm-linux-gnueabihf \
    g++-arm-linux-gnueabihf \
    gcc-riscv64-linux-gnu \
    g++-riscv64-linux-gnu \
    gcc-multilib \
    g++-multilib \
    gcc-mingw-w64 \
    g++-mingw-w64 \
    binutils-aarch64-linux-gnu \
    binutils-arm-linux-gnueabihf \
    binutils-riscv64-linux-gnu \
    binutils-mingw-w64 \
    && rm -rf /var/lib/apt/lists/*

# Optionally install additional JDKs if available
RUN set -eux; apt-get update; \
    for pkg in openjdk-11-jdk openjdk-21-jdk; do \
      if apt-cache show "$pkg" >/dev/null 2>&1; then apt-get install -y --no-install-recommends "$pkg"; fi; \
    done; \
    rm -rf /var/lib/apt/lists/*

# Install osxcross and macOS SDK
ARG OSX_SDK_URL=https://s3.dockerproject.org/darwin/v2/MacOSX11.3.sdk.tar.xz
RUN git clone https://github.com/tpoechtrager/osxcross.git /opt/osxcross && \
    cd /opt/osxcross && \
    wget -nc "$OSX_SDK_URL" -O MacOSX.sdk.tar.xz && \
    mv MacOSX.sdk.tar.xz tarballs/ && \
    UNATTENDED=yes OSX_VERSION_MIN=11.0 ./build.sh

# Add osxcross to PATH and set toolchain
ENV PATH="/opt/osxcross/target/bin:$PATH"
ENV TARGET_OS=darwin
ENV TARGET_ARCH=arm64
ENV CROSS_COMPILE_DARWIN=oa64-
ENV CROSS_COMPILE_AARCH64=aarch64-linux-gnu-
ENV CROSS_COMPILE_ARM=arm-linux-gnueabihf-
ENV CROSS_COMPILE_RISCV64=riscv64-linux-gnu-
ENV CROSS_COMPILE_MINGW=x86_64-w64-mingw32-

RUN python3 -m pip install --upgrade pip setuptools wheel

WORKDIR /workspace
COPY source/ ./source/
COPY docker/build-darwin.sh /usr/local/bin/build-platform.sh
RUN chmod +x /usr/local/bin/build-platform.sh

FROM base AS build
RUN mkdir -p /workspace/binaries
RUN /usr/local/bin/build-platform.sh

FROM scratch AS final
COPY --from=build /workspace/binaries/ /binaries/

FROM build AS export
RUN mkdir -p /export && cp -r /workspace/binaries/* /export/
