# macOS cross-compilation Dockerfile (Linux host targeting macOS)
FROM ubuntu:22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install osxcross dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    clang \
    llvm \
    lld \
    python3 \
    python3-dev \
    python3-pip \
    openjdk-17-jdk \
    gfortran-11 \
    file \
    jq \
    curl \
    wget \
    git \
    make \
    cmake \
    ninja-build \
    pkg-config \
    libxml2-dev \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    patch \
    # Cross-compilation for other platforms
    gcc-aarch64-linux-gnu \
    g++-aarch64-linux-gnu \
    gcc-arm-linux-gnueabihf \
    g++-arm-linux-gnueabihf \
    gcc-riscv64-linux-gnu \
    g++-riscv64-linux-gnu \
    gcc-multilib \
    g++-multilib \
    gcc-mingw-w64 \
    g++-mingw-w64 \
    binutils-aarch64-linux-gnu \
    binutils-arm-linux-gnueabihf \
    binutils-riscv64-linux-gnu \
    binutils-mingw-w64 \
    && rm -rf /var/lib/apt/lists/*

# Install osxcross for macOS cross-compilation
RUN git clone https://github.com/tpoechtrager/osxcross.git /opt/osxcross && \
    cd /opt/osxcross && \
    wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz && \
    mv MacOSX10.10.sdk.tar.xz tarballs/ && \
    UNATTENDED=yes OSX_VERSION_MIN=10.10 ./build.sh

# Add osxcross to PATH
ENV PATH="/opt/osxcross/target/bin:$PATH"
ENV TARGET_OS=darwin
ENV TARGET_ARCH=amd64
ENV CROSS_COMPILE_DARWIN=o64-
ENV CROSS_COMPILE_AARCH64=aarch64-linux-gnu-
ENV CROSS_COMPILE_ARM=arm-linux-gnueabihf-
ENV CROSS_COMPILE_RISCV64=riscv64-linux-gnu-
ENV CROSS_COMPILE_MINGW=x86_64-w64-mingw32-

# Set up Python
RUN python3 -m pip install --upgrade pip setuptools wheel

# Create workspace
WORKDIR /workspace

# Copy source files
COPY source/ ./source/

# Copy build script
COPY docker/build-darwin.sh /usr/local/bin/build-platform.sh
RUN chmod +x /usr/local/bin/build-platform.sh

# Build stage
FROM base AS build

# Create output directory
RUN mkdir -p /workspace/binaries

# Run builds
RUN /usr/local/bin/build-platform.sh

# Final stage
FROM scratch AS final
COPY --from=build /workspace/binaries/ /binaries/

# Export stage for multi-platform builds
FROM build AS export
RUN mkdir -p /export && cp -r /workspace/binaries/* /export/
